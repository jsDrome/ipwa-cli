name: Build

on:
  push:
    branches:
      - master

env:

  PROJECT_NAME: ${{ secrets.PROJECT_NAME }}
  DOCKER_IMAGE_NAME: ${{ secrets.DOCKER_IMAGE_NAME }}
  HEROKU_APP_NAME: ${{ secrets.HEROKU_APP_NAME }}
  DOCKER_USER: ${{ secrets.DOCKER_USER }}
  DOCKER_PASS: ${{ secrets.DOCKER_PASS }}
  PERCY_TOKEN: ${{ secrets.PERCY_TOKEN }}
  FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
  CYPRESS_TOKEN: ${{ secrets.CYPRESS_TOKEN }}
  CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
  HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  NPM_TOKEN: ${{secrets.NPM_TOKEN}}
  NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:

  production_build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [8.x, 10.x, 12.x]
    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - run: npm ci --no-optional
    - run: npm run lint
    - run: npm test
    - run: npm run test:codecov
    - run: npm run build:client:prod
    - run: npm run build:server:prod

  stage_in_heroku:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - uses: actions/checkout@v2
      - name: Heroku docker push
        run: |
          sh ./scripts/deploy-heroku.sh

  regression_tests:
    needs: [ production_build, stage_in_heroku ]
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - uses: actions/checkout@v2
      - name: cypress, puppeteer, percy
        run: |
          npm i --optional
          npm run test:cypress:run
          npm run test:puppeteer
          npm run test:percy

  release_github:
    needs: [ production_build, stage_in_heroku, regression_tests ]
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - uses: actions/checkout@v2
      - name: Build docker image
        run: docker-compose -f infra/docker/docker-compose.yml build
      - name: Log into github registry
        run: echo "${GITHUB_TOKEN}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin
      - name: Github docker push
        run: |
          REPO=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          IMAGE_ID=docker.pkg.github.com/$REPO/$PROJECT_NAME

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION

          docker tag $DOCKER_IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION

  release_dockerhub:
    needs: [ production_build, stage_in_heroku, regression_tests ]
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - uses: actions/checkout@v2
      - name: Build docker image
        run: docker-compose -f infra/docker/docker-compose.yml build
      - name: Log into github registry
        run: echo "${GITHUB_TOKEN}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin
      - name: Github docker push
        run: |
          sh ./scripts/deploy-docker.sh

  release_firebase:
    needs: [ production_build, stage_in_heroku, regression_tests ]
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - uses: actions/checkout@v2
      - name: Cloud functions
        run: |
          npm ci --no-optional
          sh ./scripts/deploy-firebase.sh

  release_semver:
    needs: [ production_build, stage_in_heroku, regression_tests ]
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - uses: actions/checkout@v2
      - name: Git tag
        run: |
          git config user.email "hi@jsdrome.com"
          git config user.name "jsDromeBot"
          npm install --no-optional
          npm run release -- --ci minor

  # publish-npm:
  #   # needs: [ release_semver ]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: npm publish
  #       run: |
  #         echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > .npmrc
  #         npm publish

  publish-gpr:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: 12
          registry-url: https://npm.pkg.github.com/
          scope: jsdrome
      # - run: npm ci
      - run: npm publish
